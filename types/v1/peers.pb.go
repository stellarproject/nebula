// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/stellarproject/nebula/types/v1/peers.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"

import time "time"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PeerType int32

const (
	Agent PeerType = 0
	Proxy PeerType = 1
	DNS   PeerType = 2
)

var PeerType_name = map[int32]string{
	0: "AGENT",
	1: "PROXY",
	2: "DNS",
}
var PeerType_value = map[string]int32{
	"AGENT": 0,
	"PROXY": 1,
	"DNS":   2,
}

func (x PeerType) String() string {
	return proto.EnumName(PeerType_name, int32(x))
}
func (PeerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_peers_d554b6b5f93f9686, []int{0}
}

type Memeber struct {
	Self                 *Peer            `protobuf:"bytes,1,opt,name=self" json:"self,omitempty"`
	Updated              time.Time        `protobuf:"bytes,2,opt,name=updated,stdtime" json:"updated"`
	Peers                map[string]*Peer `protobuf:"bytes,3,rep,name=peers" json:"peers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Memeber) Reset()         { *m = Memeber{} }
func (m *Memeber) String() string { return proto.CompactTextString(m) }
func (*Memeber) ProtoMessage()    {}
func (*Memeber) Descriptor() ([]byte, []int) {
	return fileDescriptor_peers_d554b6b5f93f9686, []int{0}
}
func (m *Memeber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Memeber.Unmarshal(m, b)
}
func (m *Memeber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Memeber.Marshal(b, m, deterministic)
}
func (dst *Memeber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Memeber.Merge(dst, src)
}
func (m *Memeber) XXX_Size() int {
	return xxx_messageInfo_Memeber.Size(m)
}
func (m *Memeber) XXX_DiscardUnknown() {
	xxx_messageInfo_Memeber.DiscardUnknown(m)
}

var xxx_messageInfo_Memeber proto.InternalMessageInfo

func (m *Memeber) GetSelf() *Peer {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *Memeber) GetUpdated() time.Time {
	if m != nil {
		return m.Updated
	}
	return time.Time{}
}

func (m *Memeber) GetPeers() map[string]*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type Peer struct {
	ID                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 PeerType          `protobuf:"varint,2,opt,name=type,proto3,enum=io.stellarproject.types.v1.PeerType" json:"type,omitempty"`
	Address              string            `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Labels               map[string]string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Payload              *types.Any        `protobuf:"bytes,5,opt,name=payload" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_peers_d554b6b5f93f9686, []int{1}
}
func (m *Peer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Peer.Unmarshal(m, b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
}
func (dst *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(dst, src)
}
func (m *Peer) XXX_Size() int {
	return xxx_messageInfo_Peer.Size(m)
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

func (m *Peer) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Peer) GetType() PeerType {
	if m != nil {
		return m.Type
	}
	return Agent
}

func (m *Peer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Peer) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Peer) GetPayload() *types.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Memeber)(nil), "io.stellarproject.types.v1.Memeber")
	proto.RegisterMapType((map[string]*Peer)(nil), "io.stellarproject.types.v1.Memeber.PeersEntry")
	proto.RegisterType((*Peer)(nil), "io.stellarproject.types.v1.Peer")
	proto.RegisterMapType((map[string]string)(nil), "io.stellarproject.types.v1.Peer.LabelsEntry")
	proto.RegisterEnum("io.stellarproject.types.v1.PeerType", PeerType_name, PeerType_value)
}

func init() {
	proto.RegisterFile("github.com/stellarproject/nebula/types/v1/peers.proto", fileDescriptor_peers_d554b6b5f93f9686)
}

var fileDescriptor_peers_d554b6b5f93f9686 = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x8d, 0x9d, 0x87, 0x9b, 0x89, 0x84, 0xac, 0x51, 0x84, 0xcc, 0x2c, 0x1a, 0xab, 0x62, 0x51,
	0x21, 0x34, 0x56, 0xc3, 0x43, 0x85, 0x05, 0x52, 0xaa, 0x54, 0x08, 0x09, 0x4a, 0x64, 0xb2, 0x28,
	0xdd, 0x8d, 0xeb, 0x5b, 0x63, 0x98, 0x78, 0xac, 0xf1, 0x38, 0xc2, 0x7f, 0x80, 0xba, 0xe2, 0x07,
	0xba, 0x40, 0xe5, 0x2b, 0xf8, 0x02, 0xbe, 0xa2, 0x48, 0x7c, 0x09, 0x9a, 0x71, 0x0c, 0xe1, 0xd5,
	0xec, 0xae, 0xef, 0x9c, 0xc7, 0x3d, 0xc7, 0xe8, 0x41, 0x92, 0xaa, 0x37, 0x65, 0x44, 0x4f, 0xc5,
	0x22, 0x28, 0x14, 0x70, 0xce, 0x64, 0x2e, 0xc5, 0x5b, 0x38, 0x55, 0x41, 0x06, 0x51, 0xc9, 0x59,
	0xa0, 0xaa, 0x1c, 0x8a, 0x60, 0xb9, 0x17, 0xe4, 0x00, 0xb2, 0xa0, 0xb9, 0x14, 0x4a, 0x60, 0x92,
	0x0a, 0xfa, 0x3b, 0x9c, 0x1a, 0x1c, 0x5d, 0xee, 0x91, 0x61, 0x22, 0x12, 0x61, 0x60, 0x81, 0x9e,
	0x6a, 0x06, 0xb9, 0x95, 0x08, 0x91, 0x70, 0x08, 0xcc, 0x57, 0x54, 0x9e, 0x05, 0x2c, 0xab, 0x56,
	0x4f, 0xa3, 0x3f, 0x9f, 0x54, 0xba, 0x80, 0x42, 0xb1, 0x45, 0x5e, 0x03, 0x76, 0x3e, 0xd9, 0xc8,
	0x79, 0x01, 0x0b, 0x88, 0x40, 0xe2, 0xfb, 0xa8, 0x53, 0x00, 0x3f, 0xf3, 0x2c, 0xdf, 0xda, 0x1d,
	0x8c, 0x7d, 0xfa, 0xff, 0x43, 0xe8, 0x0c, 0x40, 0x86, 0x06, 0x8d, 0x9f, 0x20, 0xa7, 0xcc, 0x63,
	0xa6, 0x20, 0xf6, 0x6c, 0x43, 0x24, 0xb4, 0x36, 0xa5, 0x8d, 0x29, 0x9d, 0x37, 0xa6, 0x07, 0x5b,
	0x5f, 0xaf, 0x46, 0xad, 0x8f, 0xdf, 0x46, 0x56, 0xd8, 0x90, 0xf0, 0x14, 0x75, 0x4d, 0x7c, 0xaf,
	0xed, 0xb7, 0x77, 0x07, 0x63, 0x7a, 0x9d, 0xed, 0xea, 0x52, 0x63, 0x5f, 0x1c, 0x66, 0x4a, 0x56,
	0x61, 0x4d, 0x26, 0x27, 0x08, 0xfd, 0x5a, 0x62, 0x17, 0xb5, 0xdf, 0x41, 0x65, 0x82, 0xf4, 0x43,
	0x3d, 0xe2, 0x87, 0xa8, 0xbb, 0x64, 0xbc, 0x84, 0xd5, 0x8d, 0x9b, 0xc3, 0xd5, 0xf0, 0xc7, 0xf6,
	0xbe, 0xb5, 0x73, 0x69, 0xa3, 0x8e, 0xde, 0xe1, 0x9b, 0xc8, 0x4e, 0xe3, 0x5a, 0xf5, 0xa0, 0xf7,
	0xfd, 0x6a, 0x64, 0x3f, 0x9b, 0x86, 0x76, 0x1a, 0xe3, 0x7d, 0xd4, 0xd1, 0x64, 0xa3, 0x7d, 0x63,
	0x7c, 0x7b, 0x93, 0xf6, 0xbc, 0xca, 0x21, 0x34, 0x0c, 0xec, 0x21, 0x87, 0xc5, 0xb1, 0x84, 0x42,
	0xc7, 0xd7, 0xc7, 0x36, 0x9f, 0x78, 0x8a, 0x7a, 0x9c, 0x45, 0xc0, 0x0b, 0xaf, 0x63, 0x7a, 0xb9,
	0xbb, 0x49, 0x95, 0x3e, 0x37, 0xf0, 0xba, 0x95, 0x15, 0x17, 0x53, 0xe4, 0xe4, 0xac, 0xe2, 0x82,
	0xc5, 0x5e, 0xd7, 0x04, 0x1f, 0xfe, 0xf5, 0x73, 0x26, 0x59, 0x15, 0x36, 0x20, 0xf2, 0x08, 0x0d,
	0xd6, 0x64, 0xfe, 0xd1, 0xe3, 0x70, 0xbd, 0xc7, 0xfe, 0x5a, 0x4b, 0x77, 0x4e, 0xd0, 0x56, 0x13,
	0x4e, 0xa3, 0x26, 0x4f, 0x0f, 0x8f, 0xe6, 0x6e, 0x8b, 0xf4, 0xcf, 0x2f, 0xfc, 0xee, 0x24, 0x81,
	0x4c, 0xe9, 0xed, 0x2c, 0x7c, 0x79, 0xfc, 0xda, 0xb5, 0xea, 0xed, 0x4c, 0x8a, 0xf7, 0xc6, 0x63,
	0x7a, 0xf4, 0xca, 0xb5, 0x89, 0x73, 0x7e, 0xe1, 0xeb, 0x91, 0xb8, 0x1f, 0x2e, 0xb7, 0x5b, 0x5f,
	0x3e, 0x6f, 0xff, 0xd4, 0x3b, 0x6e, 0x45, 0x3d, 0x73, 0xef, 0xbd, 0x1f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x55, 0xe5, 0xd2, 0x9a, 0x55, 0x03, 0x00, 0x00,
}
